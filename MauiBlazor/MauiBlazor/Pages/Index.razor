@page "/"
@using MauiBlazor.UserContext
@using MauiBlazor.UserContext.Data
@using MauiBlazor.UserContext.Enums
@using MudBlazor

<style>
    body {
        padding: 0 10%;
        background: rgb(161,159,207);
        background: linear-gradient(45deg, rgba(161,159,207,0.5) 0%, rgba(155,199,201,0.5) 50%, rgba(183,212,161,0.5) 100%);
        min-height: 100vh;
    }
</style>

<div class="container">
    <h1>Mud components</h1>

    <div class="d-flex justify-content-evenly mb-4">
        <MudSelect Class="mr-4" 
            @bind-value="@selectedUser" 
            T="User"
            ToStringFunc="@getNameString"
            Dense="true" 
            Label="Lista de usuários" 
            Variant="Variant.Filled" 
            AnchorOrigin="Origin.BottomCenter">

            @foreach (User user in Users)
            {
                <MudSelectItem Value="@user" />
            }
        </MudSelect>
        <MudTextField 
            Class="ml-4" 
            @bind-Value="@selectedUser.Name" 
            Label="Usuário selecionado" 
            ReadOnly="true" 
            Variant="Variant.Filled" />
    </div>

    <div class="table">
        <MudTable Items="@Users" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<User,bool>(FilterFunction)" @bind-SelectedItem="selectedUser">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Usuários</MudText>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Guid</MudTh>
                <MudTh>Id</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Cpf</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Guid">@context.GUID</MudTd>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Cpf">@context.Cpf</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>

    <div class="d-flex justify-content-evenly mb-4">
        <MudSelect Class="mr-4"
                   @bind-value="@selectedProfile"
                   T="Profile"
                   ToStringFunc="@getProfileString"
                   Dense="true"
                   Label="Lista de Perfis"
                   Variant="Variant.Filled"
                   AnchorOrigin="Origin.BottomCenter">

            @foreach (Profile profile in selectedUser.Profiles)
            {
                <MudSelectItem Value="@profile" />
            }
        </MudSelect>

        <MudSelect Class="mr-4"
                   @bind-value="@selectedAuthorizedAction"
                   T="EActions"
                   ToStringFunc="@getAuthorizedActionString"
                   Dense="true"
                   Label="Lista de Ações permitidas"
                   Variant="Variant.Filled"
                   AnchorOrigin="Origin.BottomCenter">

            @foreach (EActions action in selectedProfile.AuthorizedActions)
            {
                <MudSelectItem Value="@action" />
            }
        </MudSelect>
    </div>

</div>

@code{
    public IEnumerable<User> Users { get; set; }

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private string searchString = "";
    private User selectedUser = new User();
    private Profile selectedProfile = new Profile();
    private EActions selectedAuthorizedAction;


    protected override void OnInitialized() {
        Users = ExampleUsers.ExampleListUsers;
    }

    private bool FilterFunction(User user) => FilterFunc(user, searchString);

    private bool FilterFunc(User user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Cpf.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    Func<User, string> getNameString = p => p?.Name;
    Func<Profile, string> getProfileString = p => p?.AccessLevel == EAccessLevel.Nothing ? "" : p?.AccessLevel.ToString();
    Func<EActions, string> getAuthorizedActionString = p => p.ToString() == "0" ? "" : p.ToString();
}
