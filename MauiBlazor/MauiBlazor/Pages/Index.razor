@page "/"
@using MauiBlazor.UserContext
@using MauiBlazor.UserContext.Data
@using MauiBlazor.UserContext.Enums
@using MudBlazor

<style>
    body {
        background: rgb(161,159,207);
        background: linear-gradient(45deg, rgba(161,159,207,0.5) 0%, rgba(155,199,201,0.5) 50%, rgba(183,212,161,0.5) 100%);
        min-height: 100vh;
    }
</style>

<MudContainer Fixed="true">
    <h1>Mud components</h1>

    <MudSelect 
               @bind-value="@selectedUser"
               T="User"
               ToStringFunc="getNameString"
               Dense="true"
               Margin="Margin.Dense"
               Clearable="true"
               Label="Usuários"
               Variant="Variant.Filled"
               AnchorOrigin="Origin.BottomCenter">

        @foreach (User user in Users)
        {
            <MudSelectItem Value=@user />
        }
    </MudSelect>


    <MudField Label="Usuário selecionado"
              Dense="true"
              Variant="Variant.Filled">
        @selectedUser?.Name
    </MudField>


    <MudSelect 
               @bind-value="@selectedProfile"
               T="Profile"
               ToStringFunc="@getProfileString"
               Dense="true"
               Margin="Margin.Dense"
               Clearable
               Disabled=@(selectedUser != null ? false : true)
               Label="Perfis"
               Variant="Variant.Filled"
               AnchorOrigin="Origin.BottomCenter">

        @foreach (Profile profile in getProfiles())
        {
            <MudSelectItem Value="@profile" />
        }
    </MudSelect>


    <MudSelect 
               @bind-value="@selectedAuthorizedAction"
               T="EActions"
               ToStringFunc="@getAuthorizedActionString"
               Dense="true"
               Margin="Margin.Dense"
               Clearable
               Disabled=@(selectedProfile != null ? false : true)
               Label="Ações permitidas"
               Variant="Variant.Filled"
               AnchorOrigin="Origin.BottomCenter">

        @foreach (var action in getAuthorizedActions())
        {
            <MudSelectItem Value="@action" />
        }
    </MudSelect>


    <div class="table">
        <MudTable Items="@Users" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<User,bool>(FilterFunction)" @bind-SelectedItem="selectedUser">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Usuários</MudText>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Guid</MudTh>
                <MudTh>Id</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Cpf</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Guid">@context.GUID</MudTd>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Cpf">@context.Cpf</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
</MudContainer>

   
@code{
    public IList<User> Users { get; set; }

    private string searchString = "";
    public User selectedUser = null;
    public Profile selectedProfile = null;
    public EActions selectedAuthorizedAction;


    protected override void OnInitialized() {
        Users = ExampleUsers.ExampleListUsers;
    }

    private bool FilterFunction(User user) => FilterFunc(user, searchString);

    private bool FilterFunc(User user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Cpf.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    Func<User, string> getNameString = p => p?.Name;
    Func<Profile, string> getProfileString = p => p == null || p?.AccessLevel == EAccessLevel.Nothing? "" : p?.AccessLevel.ToString();
    Func<EActions, string> getAuthorizedActionString = p => p.ToString() == "0" ? "" : p.ToString();

    private List<Profile> getProfiles()
    {
        if (selectedUser != null)
        {
            return selectedUser.Profiles;
        } 
        else
        {
            return new List<Profile>() { new Profile() };
        }
    }

    private List<EActions> getAuthorizedActions()
    {
        var actions = new List<EActions>();
        try
        {
            actions = selectedProfile.AuthorizedActions;
        }
        catch
        {
            actions.Add(EActions.Action1);
        }

        return actions;
    }
}
